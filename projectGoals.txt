




-end goal: efficient convex shape overlap detection in 2D/3D space based on a hash search
	(with surfaces of collision returned)
	



ESSENTIALS

-mention/credit dividing plane 

-create simple polygon

-create simple fixed angle polygon with fixed number of verts  (for acos?)

-add data/function to find and store center of polygon (2 most apart points)

-create line from center of polygon to point (other center in future) for top half 
	-start with acos for fixed angles
	-returns line segment / 2 indexes of points (round up, round down)

-------------------------------------------------absolute minimum ^^^^^
-add case and branch for bottom half

-make sure to share points between top and bottom half if necessary

-add second polygon, with center.... etc....

-math for 2 points with 2 line segments....

-finish finding if 2 polygons collide



OTHER GOALS

-acos is undesirable because it is a more complex operation, create estimation for fixed angles

-x position of center-to-center at y= +-1      assuming polygon is centered at 0,0
-find and test other simple angle estimation hashes, compare them










SECONDARY GOALS

-allow for variable number of verts,
 
-add ability to rotate/translate polygons

-add 3d layer based version
	-rendering recommended

-log(n) search for arbitrary angle 2D polygons
	finding best surfaces in other ways?



































